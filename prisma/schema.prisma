// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(TENANT_USER)
  tenantId      String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts Account[]
  sessions Session[]
  tenant   Tenant?   @relation(fields: [tenantId], references: [id])
  clients  Client[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Business Models
model Tenant {
  id         String   @id @default(cuid())
  name       String
  email      String   @unique
  company    String
  plan       Plan     @default(STARTER)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  maxClients Int      @default(50)
  maxUsers   Int      @default(2)

  // Stripe Integration
  stripeCustomerId     String?
  stripeSubscriptionId String?
  subscriptionStatus   String?

  // Settings JSON
  settings Json @default("{\"currency\":\"BRL\",\"timezone\":\"America/Sao_Paulo\",\"language\":\"pt-BR\",\"branding\":{\"primaryColor\":\"#3b82f6\"}}")

  // Relations
  users   User[]
  clients Client[]

  @@map("tenants")
}

model Client {
  id             String       @id @default(cuid())
  tenantId       String
  name           String
  email          String
  server         String
  plan           ClientPlan   @default(MONTHLY)
  startDate      DateTime
  expirationDate DateTime
  status         ClientStatus @default(ACTIVE)
  createdBy      String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  tenant        Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdByUser User   @relation(fields: [createdBy], references: [id])

  @@map("clients")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  TENANT_ADMIN
  TENANT_USER

  @@map("user_role")
}

enum Plan {
  STARTER
  PROFESSIONAL
  ENTERPRISE

  @@map("plan")
}

enum ClientPlan {
  MONTHLY
  ANNUAL

  @@map("client_plan")
}

enum ClientStatus {
  ACTIVE
  INACTIVE

  @@map("client_status")
}
